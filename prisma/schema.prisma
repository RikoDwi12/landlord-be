// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  username   String
  email      String
  password   String
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  @@map("users")
}

model Group {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  properties   Property[]
  certificates Certificate[]
  entities     Entity[]

  @@map("groups")
}

model EntityType {
  id         Int       @id @default(autoincrement())
  label      String
  value      String    @unique() // dalam bentuk uppercase
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  @@map("entity_types")
}

model EntityCategory {
  id         Int       @id @default(autoincrement())
  label      String
  value      String    @unique() // dalam bentuk uppercase
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  @@map("entity_categories")
}

model Entity {
  id            Int       @id @default(autoincrement())
  group_id      Int?
  categories    String[] // divalidasi, harus sesuai dengan entityCategory
  type          String // divalidasi, harus sesuai dengan entityType
  name          String
  phone         String?
  email         String?
  nib           String?
  npwp          String?
  address       String?   @db.Text
  contact_name  String?
  contact_phone String?
  city_code     String?
  created_at    DateTime  @default(now()) @db.Timestamptz(3)
  updated_at    DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at    DateTime? @db.Timestamptz(3)

  city                    City?         @relation(fields: [city_code], references: [code])
  nop                     Nop[]
  pbb                     Pbb[]
  owner_certificates      Certificate[] @relation(name: "owner")
  behalf_of_certificates  Certificate[] @relation(name: "behalf_of")
  ajb_notary_certificates Certificate[] @relation(name: "ajb_notary")
  crm_pic_clients         Crm[]         @relation(name: "pic_client")
  crm_prospect_clients    Crm[]         @relation(name: "prospect_client")
  entityMedia             EntityMedia[]
  legals                  Legal[]
  group                   Group?        @relation(fields: [group_id], references: [id])

  @@map("entities")
}

model Nop {
  id               Int       @id @default(autoincrement())
  nop              String    @unique
  taxpayer_id      Int?
  location         String?   @db.Text
  subdistrict_code String?
  land_area        Int?
  building_area    Int?
  created_at       DateTime  @default(now()) @db.Timestamptz(3)
  updated_at       DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at       DateTime? @db.Timestamptz(3)

  subdistrict      SubDistrict?     @relation(fields: [subdistrict_code], references: [code])
  taxpayer         Entity?          @relation(fields: [taxpayer_id], references: [id])
  pbbs             Pbb[]
  certificate_nops CertificateNop[]

  @@map("nops")
}

enum PropertyType {
  RUKO
  TANAH
  GEDUNG
  GUDANG
  KANTOR
  RUMAH
  APARTEMEN
  BILLBOARD
  NEONBOX
  PABRIK
}

model Property {
  id                  Int          @id @default(autoincrement())
  group_id            Int?
  name                String
  type                PropertyType
  address             String       @db.Text
  city_code           String?
  land_area           Int
  building_area       Int
  dimension           String
  link_gmap           String?
  specific_info       Json?
  lease_price_monthly Int
  lease_price_yearly  Int
  sell_price          BigInt
  desc                String?
  is_available        Boolean      @default(true)
  is_leased           Boolean      @default(false)
  other_info          String?      @db.Text
  created_at          DateTime     @default(now()) @db.Timestamptz(3)
  updated_at          DateTime     @updatedAt @db.Timestamptz(3)
  deleted_at          DateTime?    @db.Timestamptz(3)

  city          City?           @relation(fields: [city_code], references: [code])
  group         Group?          @relation(fields: [group_id], references: [id])
  certificates  Certificate[]
  crms          Crm[]
  PropertyMedia PropertyMedia[]

  @@map("properties")
}

enum CertificateType {
  SHM
  SHGB
  SHMSRS
  LAINNYA
}

enum CertificateStatus {
  OWNER
  MILIK_SENDIRI
  PINJAM_NAMA
  KUASA_JUAL
  LAINNYA
}

model Certificate {
  id                  Int                @id @default(autoincrement())
  property_id         Int?
  behalf_of_id        Int
  group_id            Int?
  type                CertificateType
  no                  String
  subdistrict_code    String?
  address             String?            @db.Text
  location_name       String?
  original_cert       String?
  original_doc        String?
  copy_archive        String?
  no_copy_archive     String?
  ownership_status    CertificateStatus?
  owner_id            Int?
  functional          String?
  land_area           Float
  ajb_notary_id       Int
  ajb_no              String
  ajb_date            DateTime
  ajb_total           Int
  publish_date        DateTime           @db.Date
  expired_date        DateTime           @db.Date
  other_info          String?            @db.Text
  documents           Json?
  document_activities Json? //silsilah kalau di landlord v1
  created_at          DateTime           @default(now()) @db.Timestamptz(3)
  updated_at          DateTime           @updatedAt @db.Timestamptz(3)
  deleted_at          DateTime?          @db.Timestamptz(3)

  subdistrict      SubDistrict?       @relation(fields: [subdistrict_code], references: [code])
  ajb_notary       Entity             @relation(fields: [ajb_notary_id], references: [id], name: "ajb_notary")
  owner            Entity?            @relation(fields: [owner_id], references: [id], name: "owner")
  property         Property?          @relation(fields: [property_id], references: [id])
  behalf_of        Entity             @relation(fields: [behalf_of_id], references: [id], name: "behalf_of")
  certificate_nops CertificateNop[]
  group            Group?             @relation(fields: [group_id], references: [id])
  certificateMedia CertificateMedia[]

  @@map("certificates")
}

model Pbb {
  id             Int       @id @default(autoincrement())
  nop_id         Int
  year           String    @db.Char(4)
  land_area      Int
  building_area  Int
  njop_land      Int
  njop_building  Int
  njop_no_tax    Int
  taxpayer_id    Int
  stimulus       Int
  multiplier     Float
  payment_fee    Int       @default(0)
  total_payment  Int?
  payment_method String?
  payment_date   DateTime? @db.Date
  created_at     DateTime  @default(now()) @db.Timestamptz(3)
  updated_at     DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at     DateTime? @db.Timestamptz(3)

  taxpayer Entity     @relation(fields: [taxpayer_id], references: [id])
  nop      Nop        @relation(fields: [nop_id], references: [id])
  PbbMedia PbbMedia[]

  @@map("pbbs")
}

model CertificateNop {
  certificate    Certificate @relation(fields: [certificate_id], references: [id])
  certificate_id Int
  nop            Nop         @relation(fields: [nop_id], references: [id])
  nop_id         Int

  @@id([certificate_id, nop_id])
  @@map("certificate_nop")
}

model Crm {
  id                 Int       @id @default(autoincrement())
  property_id        Int
  date               DateTime  @db.Date
  prospect_client_id Int?
  prospect_desc      String    @db.Text
  pic_client_id      Int?
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  updated_at         DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at         DateTime? @db.Timestamptz(3)

  prospect_client Entity?  @relation(fields: [prospect_client_id], references: [id], name: "prospect_client")
  pic_client      Entity?  @relation(fields: [pic_client_id], references: [id], name: "pic_client")
  property        Property @relation(fields: [property_id], references: [id])

  @@map("crms")
}

enum LegalType {
  NOTARIIL
  BAWAH_TANGAN
  BAWAH_TANGAN_LEGALISASI
  BAWAH_TANGAN_WAARMERKING
  DRAFT_BAWAH_TANGAN
}

model Legal {
  id                Int       @id @default(autoincrement())
  type              LegalType
  title             String
  no                String
  date              DateTime  @db.Date
  legalization_no   String?
  legalization_date DateTime? @db.Date
  detail            String?
  storage_cabinet   String?
  storage_rax       String?
  storage_row       String?
  storage_map       String?
  notary_id         Int?

  notary    Entity?        @relation(fields: [notary_id], references: [id])
  parties   LegalParty[] // pihak
  witnesses LegalWitness[] // saksi

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  @@map("legals")
}

// untuk menyimpan pihak2 yang terlibat di akta legal
enum LegalPartyType {
  FIRST_PARTY
  SECOND_PARTY
}

model LegalParty {
  id        Int             @id @default(autoincrement())
  legal_id  Int
  entity_id Int
  type      LegalPartyType? // jika null nanti masuk ke parapihak

  legal Legal @relation(fields: [legal_id], references: [id])

  @@map("legal_parties")
}

// untuk menyimpan saksi yang terlibat di akta legal
model LegalWitness {
  id        Int @id @default(autoincrement())
  legal_id  Int
  entity_id Int

  legal Legal @relation(fields: [legal_id], references: [id])

  @@map("legal_witnesses")
}

model Province {
  code      String  @id @unique
  name      String
  latitude  String?
  longitude String?
  cities    City[]

  @@map("indonesia_provinces")
}

model City {
  code          String  @id @unique
  name          String
  province_code String
  latitude      String?
  longitude     String?

  province  Province   @relation(fields: [province_code], references: [code])
  entities  Entity[]
  districts District[]
  Property  Property[]

  @@map("indonesia_cities")
}

model District {
  code      String  @id @unique
  name      String
  city_code String
  latitude  String?
  longitude String?

  city         City          @relation(fields: [city_code], references: [code])
  subdistricts SubDistrict[]

  @@map("indonesia_districts")
}

model SubDistrict {
  code          String  @id @unique
  name          String
  district_code String
  latitude      String?
  longitude     String?

  district    District      @relation(fields: [district_code], references: [code])
  Certificate Certificate[]
  Nop         Nop[]

  @@map("indonesia_subdistricts")
}

enum MediaTag {
  ATTACHMENT
  // TODO: barangkali ada type media yang lain
}

model Media {
  id         Int        @id @default(autoincrement())
  directory  String
  filename   String
  extension  String     @db.Char(32)
  mime_type  String     @db.Char(128)
  size       Int
  tags       MediaTag[]
  created_at DateTime   @default(now()) @db.Timestamptz(3)
  updated_at DateTime   @updatedAt @db.Timestamptz(3)
  deleted_at DateTime?  @db.Timestamptz(3)

  entityMedia      EntityMedia[]
  pbbMedia         PbbMedia[]
  certificateMedia CertificateMedia[]
  propertyMedia    PropertyMedia[]

  @@unique([directory, filename, extension])
  @@map("media")
}

model EntityMedia {
  id        Int @id @default(autoincrement())
  entity_id Int
  media_id  Int

  media  Media  @relation(fields: [media_id], references: [id])
  entity Entity @relation(fields: [entity_id], references: [id])

  @@unique([media_id, entity_id])
  @@map("entity_media")
}

model PbbMedia {
  id       Int @id @default(autoincrement())
  pbb_id   Int
  media_id Int

  media Media @relation(fields: [media_id], references: [id])
  pbb   Pbb   @relation(fields: [pbb_id], references: [id])

  @@unique([media_id, pbb_id])
  @@map("pbb_media")
}

model CertificateMedia {
  id             Int @id @default(autoincrement())
  certificate_id Int
  media_id       Int

  media       Media       @relation(fields: [media_id], references: [id])
  certificate Certificate @relation(fields: [certificate_id], references: [id])

  @@unique([media_id, certificate_id])
  @@map("certificate_media")
}

model PropertyMedia {
  id          Int @id @default(autoincrement())
  property_id Int
  media_id    Int

  media    Media    @relation(fields: [media_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@unique([media_id, property_id])
  @@map("property_media")
}
